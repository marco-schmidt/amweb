buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.bmuschko:gradle-tomcat-plugin:2.5'
  }
}

plugins {
  id 'com.diffplug.gradle.spotless' version '3.24.3'
  id 'com.github.jk1.dependency-license-report' version '1.11'
  id 'com.github.spotbugs' version '2.0.0'
  id 'org.owasp.dependencycheck' version '5.2.2'
}

repositories {
  jcenter()
  mavenCentral()
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'checkstyle'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'com.github.jk1.dependency-license-report'
apply plugin: 'com.github.spotbugs'
apply plugin: 'org.owasp.dependencycheck'

description 'Asset Manager web application'
defaultTasks 'clean', 'build'

dependencies {
  implementation group: 'com.github.marco-schmidt', name: 'am', version: '0.0.4'
  implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
  testImplementation group: 'junit', name: 'junit', version: '4.12'
  implementation 'org.glassfish:jakarta.faces:2.3.13'
  implementation 'org.jboss.weld.servlet:weld-servlet-shaded:3.1.2.Final'
  compileOnly 'javax.servlet:servlet-api:2.5'
  def tomcatVersion = '9.0.26'
  tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
}

wrapper {
  gradleVersion = '5.6.2'
}

tasks.withType(JavaCompile) {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = sourceCompatibility
  options.debugOptions.debugLevel = 'lines,vars,source'
  options.encoding = java.nio.charset.StandardCharsets.UTF_8
  options.warnings = true
  options.deprecation = true
  options.compilerArgs += ['-Xlint:all', '-Werror']
}

configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    if (details.requested.group == 'com.fasterxml.jackson.core' && details.requested.name == 'jackson-databind') {
      details.useVersion '2.9.10'
      details.because 'CVE-2019-16335, CVE-2019-14540'
    }
    if (details.requested.group == 'commons-beanutils' && details.requested.name == 'commons-beanutils') {
      details.useVersion '1.9.4'
      details.because 'CVE-2019-10086'
    }
    if (details.requested.group == 'org.apache.commons' && details.requested.name == 'commons-compress') {
      details.useVersion '1.19'
      details.because 'CVE-2019-12402'
    }
  }
}

dependencyCheck {
  cveValidForHours=24
  failBuildOnCVSS=6.5
  analyzers {
    assemblyEnabled=false
  }
}
check.dependsOn dependencyCheckAnalyze

war {
    from('src/main/java') {
        include '*.properties'
        into('WEB-INF/classes')
    }
}

// https://github.com/checkstyle/checkstyle
// http://checkstyle.sourceforge.net
checkstyle {
  toolVersion '8.24'
  ignoreFailures false
  showViolations true
  configDir = file("${rootDir}/config/checkstyle")
}

// https://github.com/spotbugs/spotbugs
spotbugs {
  toolVersion = '3.1.12'
  effort = 'max' // min, default, max
  reportLevel = 'low' // low, medium, high  
  ignoreFailures = false
  excludeFilter = file('config/spotbugs/excludeBugsFilter.xml')
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
    html.stylesheet resources.text.fromFile('config/spotbugs/report-stylesheet.xsl')
  }
}

// https://github.com/diffplug/spotless
spotless {
  java {
    licenseHeaderFile 'config/spotless/license-header.txt'
    removeUnusedImports()
    trimTrailingWhitespace()
    eclipse().configFile 'config/eclipse/formatter.xml'
  }
}

eclipse {
    jdt {
        sourceCompatibility=1.8
        targetCompatibility=1.8
    }

  wtp {
    // https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseWtpComponent.html
    component {
      contextPath = 'am'
    }

    // https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseWtpFacet.html
    facet {
            facet name: 'jst.java', version: '1.8'
            facet name: 'jst.web', version: '3.0'
    }
  }
}

licenseReport {
  allowedLicensesFile = new File("$projectDir/config/licenseReport/allowed-licenses.json")
}
check.dependsOn checkLicense

tomcat {
  httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
  ajpProtocol  = 'org.apache.coyote.ajp.AjpNio2Protocol'
  httpPort = 8081
  contextPath = 'am'
}

task printCache {
  description "print absolute local paths to all dependencies"
  doLast {
    configurations.runtimeClasspath.each { println it }
  }
}
